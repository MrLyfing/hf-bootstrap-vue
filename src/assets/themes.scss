/**
 * Generic themes are generated based on three colors(primary, hero, upper) config.
 */
$themesConfig: (
  default: (
    primary: rgb(255, 255, 255), // #ffffff
    hero: rgb(4, 105, 150), // #046996
    upper: rgb(0, 146, 176) // #0092b0
  ),
  black: (
    primary: rgb(255, 255, 255), // #ffffff
    hero: rgb(39, 43, 47), // #272b2f
    upper: rgb(39, 43, 47) // #272b2f
  ),
  gray: (
    primary: rgb(255, 255, 255), // #ffffff
    hero: rgb(85, 102, 118), // #556676
    upper: rgb(104, 124, 143) // #687c8f
  ),
  white: (
    primary: rgb(0, 146, 176), // #0092b0
    hero: rgb(4, 105, 150), // #046996
    upper: rgb(255, 255, 255) // #ffffff
  )
);

/**
 * Color opacities in percentage.
 */
$colorOpacities:(
  primary: 10 20 25 30 40 50 60 70 80,
  hero: 10 20 30 60,
  upper: 40 90,
);

/**
 * Custom theme colors.
 * Additional color keys can be defined or generic can be overridden.
 */
$themes: (
  theme-white: (
    color_upper_40: rgba(4, 105, 150, .4),
    color_hero_70: rgba(4, 105, 150, .7),
  )
);

/**
 * Generates color opacity map.
 * @return [Sass::Script::Value::Map] Color opacity map.
 */
@function getColorOpacityMap($colorKey, $colorVal) {
  $opacityList: map-get($colorOpacities, $colorKey);
  $colorMap: (color_#{$colorKey}: $colorVal);
  @each $opacity in $opacityList {
    $colorMap: map-merge($colorMap, (color_#{$colorKey}_#{$opacity}: rgba($colorVal, $opacity / 100)));
  }
  @return $colorMap;
}

/**
 * Generates themes based on $themesConfig
 */
@each $themeName, $themeConfig in $themesConfig {
  $themeMap: ();
  @each $colorKey, $colorVal in $themeConfig {
    $themeMap: map-merge($themeMap, getColorOpacityMap($colorKey, $colorVal));
  }
  // Merges custom colors defined in $themes to override.
  @if map-has-key($themes, theme-#{$themeName}) {
    $themeMap: map-merge($themeMap, map-get($themes, theme-#{$themeName}))
  }
  $themes: map-merge($themes, (theme-#{$themeName}: $themeMap));
}


@mixin themes_bg() {
  @each $theme, $map in $themes {
    $hero: map-get($map, 'color_hero');
    $upper: map-get($map, 'color_upper');
    $color_primary: map-get($map, 'color_primary');
    .#{$theme} {
      @if $theme == 'theme-white' {
        background-color: $upper;
      } @else {
        background-color: $hero;
        background-image: linear-gradient(165deg, $upper, $hero);
        background-repeat: no-repeat;
      }
      color: $color_primary;
    }
  }
}
